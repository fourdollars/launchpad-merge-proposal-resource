#!/bin/bash

set -euo pipefail
IFS=$'\n\t'

exec 3>&1
exec 1>&2

payload="$(cat <&0)"

debug=$(jq -r '.source.debug // "false"' <<< "$payload")

if [ "$0" = '/opt/resource/out' ]; then
    jq -n '{}' >&3  # noop
    exit
fi

oauth_consumer_key=$(jq -r '.source.oauth_consumer_key // ""' <<< "$payload")

if [ -n "$oauth_consumer_key" ]; then
    oauth_token=$(jq -r '.source.oauth_token // ""' <<< "$payload")
    oauth_token_secret=$(jq -r '.source.oauth_token_secret // ""' <<< "$payload")
    export LAUNCHPAD_TOKEN="$oauth_token:$oauth_token_secret:$oauth_consumer_key"
else
    export LAUNCHPAD_TOKEN="::"
fi

if [ "$debug" = "verbose" ]; then
    set -x
fi

if [ "$(jq -r '.source | has("mp")' <<< "$payload")" = 'true' ]; then
    case "$(jq -r '.source.mp | type' <<< "$payload")" in
        ('string')
            MPs=("$(jq -r .source.mp <<< "$payload")")
            ;;
        ('array')
            mapfile -t MPs < <(jq -r '.source.mp | .[]' <<< "$payload")
            ;;
        (*)
            echo "Invalid input for .source.mp"
            exit 1
            ;;
    esac
else
    echo "You need to provide the merge proposal."
    exit 1
fi

if [ "$(jq -r '.source | has("queue_status")' <<< "$payload")" = 'true' ]; then
    case "$(jq -r '.source.queue_status | type' <<< "$payload")" in
        ('string')
            queue_status=("$(jq -r .source.queue_status <<< "$payload")")
            ;;
        ('array')
            mapfile -t queue_status < <(jq -r '.source.queue_status | .[]' <<< "$payload")
            ;;
        (*)
            echo "Invalid input for .source.mp"
            exit 1
            ;;
    esac
else
    queue_status=()
fi

case "$0" in
    ('/opt/resource/in'|'/opt/resource/out')
        cd "$1"
        ;;
esac

files=()
case "$0" in
    ('/opt/resource/check'|'/opt/resource/in')
        for mp in "${MPs[@]}"; do
            id=$(basename "$mp")
            launchpad-api get "$mp" > "$id".json
            if [ -z "${queue_status[*]}" ]; then
                files+=("$id".json)
            elif [[ "${queue_status[*]}" =~ $(jq -r .queue_status < "$id".json) ]]; then
                files+=("$id".json)
            else
                rm "$id".json
            fi
        done
        if [ -n "${files[*]}" ]; then
            digest="sha256:$(cat "${files[@]}" | sha256sum | awk '{print $1}')"
        else
            digest=""
        fi
        ;;
    ('/opt/resource/out')
        ;;
esac

case "$0" in
    ('/opt/resource/check')
        if [ -n "$digest" ]; then
            json="$(cat <<ENDLINE
[
    {
        "digest": "$digest"
    }
]
ENDLINE
)"
        else
            json="[]"
        fi
        ;;
    ('/opt/resource/in')
        if [ -n "$digest" ]; then
            json="$(cat <<ENDLINE
{
    "version": {
        "digest": "$digest"
    },
    "metadata": [
ENDLINE
)"
            for mp in "${MPs[@]}"; do
                json+="$(cat <<ENDLINE
        {
            "name": "url",
            "value": "https://code.launchpad.net/$mp"
        }
ENDLINE
)"
                if [ "$mp" != "${MPs[-1]}" ]; then
                    json+=","
                fi
            done
            json+="$(cat <<ENDLINE
    ]
}
ENDLINE
)"
        else
            json="{}"
        fi
        ;;
esac

jq -n "$json" >&3
